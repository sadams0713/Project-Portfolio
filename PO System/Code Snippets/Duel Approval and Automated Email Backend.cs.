[HttpPut("approve-entry")]
public async Task<IActionResult> ConfirmEntry(long recordId, [FromBody] ManagerReviewDto reviewDetails)
{
    _logger.LogInformation($"Processing manager approval for record: {recordId}, Payload: {JsonConvert.SerializeObject(reviewDetails)}");

    var entry = await _context.Records.FindAsync(recordId);
    if (entry == null)
    {
        _logger.LogWarning($"No record found with ID {recordId}");
        return NotFound();
    }

    entry.FlagA = reviewDetails.IsAccepted;
    entry.FlagB = reviewDetails.IsAccepted;
    entry.TimestampA = DateTime.Now;
    entry.TimestampB = DateTime.Now;
    entry.ReviewerName = reviewDetails.Reviewer;
    entry.ApprovedBy = reviewDetails.Reviewer;

    _context.Records.Update(entry);
    await _context.SaveChangesAsync();

    _logger.LogInformation($"Updated entry: {entry.ReferenceCode}, FlagA: {entry.FlagA}, FlagB: {entry.FlagB}");

    if (entry.IsCritical && entry.FlagA)
    {
        _logger.LogInformation($"Triggering alert for high-priority entry: {entry.ReferenceCode}");

        List<string> recipients = new();

        if (entry.RegionCode == true && entry.TotalAmount >= 500 && entry.TotalAmount < 5000 && entry.DepartmentId == 5)
        {
            // Insert department-specific contacts
            // recipients.Add("team-alpha@example.com");
        }

        if (entry.RegionCode == true && entry.TotalAmount >= 500 && entry.TotalAmount < 5000 && entry.DepartmentId != 5)
        {
            // Insert alternate routing
            // recipients.Add("group-beta@example.com");
        }

        if (entry.RegionCode == true && entry.TotalAmount >= 5000)
        {
            // Insert upper-level notification list
            // recipients.Add("exec-alerts@example.com");
        }

        if (recipients.Count > 0)
        {
            string detailsLink = "REPLACE_WITH_LINK";
            string subject = $"Record {entry.ReferenceCode} Has Been Approved";
            string body = $@"
                <h3>Approval Notification</h3>
                <p><strong>Record ID:</strong> <a href='{detailsLink}'>{entry.ReferenceCode}</a> has been reviewed by {entry.ReviewerName}.</p>
                <p><strong>Created By:</strong> {entry.SubmittedBy}</p>
                <p><strong>Amount:</strong> ${entry.TotalAmount:F2}</p>
                <p><em>Note: Internal access only.</em></p>";

            await _emailService.SendEmailAsync(recipients, subject, body);
            _logger.LogInformation($"Alert sent to: {string.Join(", ", recipients)}");
        }
    }

    if (entry.FlagA && entry.FlagB)
    {
        _logger.LogInformation("Calling internal notification dispatch.");
        await TriggerNotification(entry);
    }

    return NoContent();
}

[HttpPut("gm-approve-entry")]
public async Task<IActionResult> ConfirmByExecutive(long recordId, [FromBody] ExecutiveReviewDto reviewInput)
{
    _logger.LogInformation($"Executive review submitted for record: {recordId}, Payload: {JsonConvert.SerializeObject(reviewInput)}");

    var record = await _context.Records.FindAsync(recordId);
    if (record == null)
    {
        _logger.LogWarning($"No record found with ID {recordId}");
        return NotFound();
    }

    record.FlagB = reviewInput.ExecutiveApproved;
    record.FlagA = reviewInput.ExecutiveApproved;
    record.TimestampA = DateTime.Now;
    record.TimestampB = DateTime.Now;
    record.ApprovedBy = reviewInput.ApprovedBy;

    _context.Records.Update(record);
    await _context.SaveChangesAsync();

    _logger.LogInformation($"Updated record: {record.ReferenceCode}, FlagA: {record.FlagA}, FlagB: {record.FlagB}");

    if (record.FlagA && record.FlagB)
    {
        _logger.LogInformation("Triggering final approval routine.");
        await TriggerNotification(record);
    }

    return NoContent();
}

private async Task TriggerNotification(RecordEntity record)
{
    string? originatorEmail = await LookupEmailByName(record.SubmittedBy);

    if (!string.IsNullOrEmpty(originatorEmail))
    {
        string vendorName = await _context.Organizations
            .Where(org => org.Id == record.VendorId)
            .Select(org => org.DisplayName)
            .FirstOrDefaultAsync() ?? "Unknown Vendor";

        string infoLink = "REPLACE_WITH_LINK";
        string subject = $"Record {record.ReferenceCode} Approved";

        string body = $@"
            <h3>Approval Summary</h3>
            <table border='1' cellpadding='8' cellspacing='0' style='border-collapse: collapse; width: 80%;'>
                <tr style='background-color: #f2f2f2;'>
                    <th>Field</th>
                    <th>Value</th>
                </tr>
                <tr><td>Record ID</td><td>{record.ReferenceCode}</td></tr>
                <tr><td>Vendor</td><td>{vendorName}</td></tr>
                <tr><td>Amount</td><td>${record.TotalAmount:F2}</td></tr>
                <tr><td>Status</td><td>Approved</td></tr>
            </table>";

        await _emailService.SendEmailAsync(originatorEmail, subject, body);
    }
    else
    {
        _logger.LogWarning($"No email found for user: {record.SubmittedBy}. Skipping notification.");
    }
}

private async Task<string?> LookupEmailByName(string fullName)
{
    var names = fullName.Split(' ', 2);
    if (names.Length < 2) return null;

    string first = names[0];
    string last = names[1];

    using var scope = _serviceScopeFactory.CreateScope();
    var scopedDb = scope.ServiceProvider.GetRequiredService<GenericDbContext>();

    return await scopedDb.Users
        .Where(u => u.FirstName == first && u.LastName == last)
        .Select(u => u.Email)
        .FirstOrDefaultAsync();
}
